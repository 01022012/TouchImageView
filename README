Android: TouchImageView
Created by: Mike Ortiz
Contributions by: 
 * Patrick Lackemacher
 * Babay88
 * @ipsilondev
 * hank-cp
 * singpolyma

Support:
----------------------
Minimum API: 8

Usage:
———————————
Place TouchImageView.java in your project. It can then be used the same as
ImageView. Example:

TouchImageView img = (TouchImageView) findViewById(R.id.img);

If you are using TouchImageView in xml, then you must provide the full package
name, because it is a custom view. Example:

<com.example.touch.TouchImageView
	    android:id="@+id/img”
	    android:layout_width="match_parent"
	    android:layout_height="match_parent" />

API:
----------------------
// Return the point at the center of the zoomable image. The PointF coordinates range
// in value between 0 and 1 and the focus point is denoted as a fraction from the left 
// and top of the view. For example, the top left corner of the image would be (0, 0). 
// And the bottom right corner would be (1, 1).
PointF getCenterOfZoomedImage();

// Get the current zoom. This is the zoom relative to the initial
// scale, not the original resource.
float getCurrentZoom();

// For a given point on the view (ie, a touch event), returns the
// point relative to the original drawable's coordinate system.
PointF getDrawablePointFromTouchPoint(float x, float y);

// For a given point on the view (ie, a touch event), returns the
// point relative to the original drawable's coordinate system.
PointF getDrawablePointFromTouchPoint(PointF p);

// Get the max zoom multiplier.
float getMaxZoom();

// Get the min zoom multiplier.
float getMinZoom();

// Return a bitmap of the zoomed image as it appears within the view. This essentially
// acts as a "screenshot" of the view and the size of the final bitmap is limited to the
// resolution of the view itself.
Bitmap getZoomedImage()

// Return a bitmap of the zoomed image. This method is different from getZoomedImage(), 
// because it cuts the image directly from the drawable source, and thus, is not limited 
// by the resolution of the view. Not supported with FIT_XY.
Bitmap getZoomedImageFromSource()

// Return a Rect representing the zoomed image in the coordinate system 
// of the drawable source.
Rect getZoomedRect();

// Returns false if image is in initial, unzoomed state. False, otherwise.
boolean isZoomed();

// Reset zoom and translation to initial state.
void resetZoom();

// Set the max zoom multiplier. Default value: 3.
void setMaxZoom(float max);

// Set the min zoom multiplier. Default value: 1.
void setMinZoom(float min);

// Set zoom to the specified scale. Image will be centered by default.
void setZoom(float scale);

// Set zoom to the specified scale. Image will be centered around the point
// (focusX, focusY). These floats range from 0 to 1 and denote the focus point
// as a fraction from the left and top of the view. For example, the top left 
// corner of the image would be (0, 0). And the bottom right corner would be (1, 1).
void setZoom(float scale, float focusX, float focusY);

// Set zoom to the specified scale. Image will be centered around the point
// (focusX, focusY). These floats range from 0 to 1 and denote the focus point
// as a fraction from the left and top of the view. For example, the top left 
// corner of the image would be (0, 0). And the bottom right corner would be (1, 1).
void setZoom(float scale, float focusX, float focusY, ScaleType scaleType);

// Set zoom parameters equal to another TouchImageView. Including scale, position,
// and ScaleType.
void setZoom(TouchImageView img);